package f1telemetry2018

import (
	"bytes"
	"encoding/hex"
	"fmt"
	"io/ioutil"
	"testing"

	"github.com/TIBCOSoftware/flogo-contrib/action/flow/test"
	"github.com/TIBCOSoftware/flogo-lib/core/activity"
	"github.com/lunixbochs/struc"
)

var activityMetadata *activity.Metadata

func getActivityMetadata() *activity.Metadata {

	if activityMetadata == nil {
		jsonMetadataBytes, err := ioutil.ReadFile("activity.json")
		if err != nil {
			panic("No Json Metadata found for activity.json path")
		}

		activityMetadata = activity.NewMetadata(string(jsonMetadataBytes))
	}

	return activityMetadata
}

func TestCreate(t *testing.T) {

	act := NewActivity(getActivityMetadata())

	if act == nil {
		t.Error("Activity Not Created")
		t.Fail()
		return
	}
}

func TestEvalQuality(t *testing.T) {

	act := NewActivity(getActivityMetadata())
	tc := test.NewTestActivityContext(getActivityMetadata())

	fmt.Println(" ")
	fmt.Println("#######   Testing -  MSGTYPE 3 - Event Data ###############################################################")

	var buf bytes.Buffer

	arr, err1 := hex.DecodeString("e2070103eb15f8232a247e7226e35842500400001353454e44")

	if err1 != nil {
		fmt.Printf("error code: %v \n", err1)
		return
	}

	tc.SetInput("buffer", arr)
	err := struc.Pack(&buf, arr)

	o := &F1Header{}

	err = struc.Unpack(&buf, o)
	if err != nil {
		fmt.Printf("error code: %v \n", err)
		return
	}

	fmt.Printf("F1 Header : \n %+v \n", o)

	fmt.Println("#######   call routine ")
	act.Eval(tc)

	rtype := tc.GetOutput("msgtype")
	rdata := tc.GetOutput("data")

	fmt.Printf("Msg Type: %v \n", rtype)
	fmt.Printf("csv data: %v \n", rdata)

	if tc.GetOutput("msgtype") == nil {
		t.Fail()
	}

	fmt.Println(" ")
	fmt.Println("#######   Testing -  MSGTYPE 0 - Motion Data ###############################################################")

	arr, err1 = hex.DecodeString("e20701000dbc53c77cf22db20e745a3c0000000013ef9f9243c63699c26aac23c35c2661bb14fa1fbb1474c6b9b5ba8cff9d6b70946bfcb9ba602db6bd8910a53cdbdb913d4f8212bf80a5d0bcaa7ae53c0a8d8543688a99c25df004c3ac0bb13840f2223840d23db9acbabdff976b759456fcb2ba4477fc3b89a67dbad1922cbd419612bf0084cebc4ac8ea3c0ca56843383d99c2e1a58bc2a59a773b92eb8fbbb7060a3bacbaa9ff976b749478fcb1ba136e413d17a5a8bcef71aebdfc9512bfc0dac9bc6219e23cc0f089431f3899c2c1cb08c3368b4fbbaa279ebaa378a6bab0bac0ff9a6b72945bfcb6ba8322bebd18f1f7bbc8dc463df48c12bf00e8ccbc594de93c27e996436d6699c215b43ac38d3f23bb4898f5b9f28d62bab5ba59ff9d6b70947ffcb8bac489aebd56cb4f3becd4e3b92d8112bf805ad3bc145be03c8ff35f43de3d99c2568e61c29494173a4cba3c39a098a2b9a8baacff956b779463fcadbaae545bbd5bf74dbc37e2863db59f12bf800fcebc2c82e73c53f69643bb2499c2aa1d31c31cda843a685993b91973b43ab3ba6dff9b6b71946dfcb6ba7b88833db29ba23b3e0270bb3f8712bfc067d4bcbed6e43cc5558143173c99c26242dcc260b980bb76f6d23b47d5b8baadbaaaff986b759445fcb3ba89cb8abd8b34cb3c5d6f0e3ea89412bf0090d4bc7be9ee3c6dd85f435a8b99c24bef83c2d8e21bbbe66a3f3b6f06c4bab7baa5ff9e6b6e9472fcbcbae4f1ac3bf4742cbcc178963c277c12bf80d4cbbceface33cd2919243ec7799c2bf432dc31d4a743a50353f3abc03743ab3ba7bff9c6b71946dfcb7ba23ee4e3dc39e39bb985dea3a958512bf008bd2bcb7f1e43c40886843a18499c26cd39ec29f8dd73a248d563a9084c838abbab5ff976b759477fcb0ba9b5c7d3ca0b68ab9c037f1b9549712bf00a0c8bcbc7ce23c06ff7943993b99c22267c1c25ba15d3ade75743badd1c539a8baa6ff946b78944afcadbadc00f6bbac9f4dbb336b773ccea112bf80e7d3bc2a8ced3c57377143db8d99c25dadb9c24ab0fc3ad1f5153bcf4d8139a7babeff946b789459fcadba969f6a3c436486bb86213b3c5aa112bf40a3cdbc95e5e93cf1368143fc8399c2e2fceec20ce3ef3abccc1a3ae2418839b2baaaff9b6b729448fcb7baadb69bbbdc20a339a240733a408a12bfc008d4bc8c43ee3c9ee38943ad8999c20c6212c33b79673a705021396bbb273ab1babdff9b6b729451fcb7ba5d0a093dab4be53bf13c9ebc8e8a12bfc05ccfbc70cceb3c869a8543893499c2e7b2f6c24173363bd82bf4b92886903ab1bab4ff9b6b729455fcb7baf836e63b623d993a34358ebc968a12bfc0decfbc19f5ea3c443b8e43f88099c21ed21fc3f88635bbb05d9d3b33cb2bbbb2ba9cff9b6b71945bfcb7ba0eab9fbdf25545bce31f963da88812bf80c3d1bc5d54e93ce1e579434b8899c2a692d4c2141c2aba80bee738d01a5039aebaa8ff996b749448fcb4ba54b66dbd9a6bb8bab4e75ebcbc9112bf004ed4bc763cee3c99488e43363a99c2eb3a16c3e8974dbb782bfb3990988dbab7baafff9e6b6e945cfcbcba3e8a9abdb67a8c3ba11a45bb4f7d12bf00facebcee11e93c5d577143fb3a99c22d95a6c2f54b743b7444013d8ce597b9a8bac1ff956b77946bfcaeba000000000000000000000000769e12bfc085c9bce479e53c0263e2bef690dabd3435e93fdcca1240eac825414c6c93401c478b42cc4080420cd35bc5cb4766c5bb31324679fd174600000000000000000000000000000000000000000000000000000000000000009ce57c3b60db003d485718bb37e0dbbca02b9bbabcfc0ebdb12e99c07656e3c0b10f62c06bd13e39")

	if err1 != nil {
		fmt.Printf("error code: %v \n", err1)
		return
	}
	tc.SetInput("buffer", arr)
	buf.Reset()
	err = struc.Pack(&buf, arr)
	err = struc.Unpack(&buf, o)
	fmt.Printf("F1 Header : \n %+v \n", o)

	fmt.Println("#######   call routine ")
	act.Eval(tc)

	rtype = tc.GetOutput("msgtype")
	rdata = tc.GetOutput("data")

	fmt.Printf("Msg Type: %v \n", rtype)
	fmt.Printf("csv data: %v \n", rdata)

	if tc.GetOutput("msgtype") == nil {
		t.Fail()
	}

	fmt.Println(" ")
	fmt.Println("#######   Testing -  MSGTYPE 1 - Session Data ###############################################################")

	arr, err1 = hex.DecodeString("e20701010dbc53c77cf22db20e745a3c0000000013001a13052a120a0400201c201c500000ff00126b46783f006fdb943d00957f1b3e00c7f75d3e008ea3763e00f28aa83e00cb2ec13e003edcd83e00b7df043f00014e0f3f00521b1b3f0089b6243f000ca6383f00dff0473f000bea4d3f00ef595a3f001101623f00f29e683f000000000000000000000000000000000000")

	if err1 != nil {
		fmt.Printf("error code: %v \n", err1)
		return
	}
	tc.SetInput("buffer", arr)
	buf.Reset()
	err = struc.Pack(&buf, arr)
	err = struc.Unpack(&buf, o)
	fmt.Printf("F1 Header : \n %+v \n", o)

	fmt.Println("#######   call routine ")
	act.Eval(tc)

	rtype = tc.GetOutput("msgtype")
	rdata = tc.GetOutput("data")

	fmt.Printf("Msg Type: %v \n", rtype)
	fmt.Printf("csv data: %v \n", rdata)

	if tc.GetOutput("msgtype") == nil {
		t.Fail()
	}

	fmt.Println(" ")
	fmt.Println("#######   Testing -  MSGTYPE 2 - Lap Data ###############################################################")

	arr, err1 = hex.DecodeString("e20701020dbc53c77cf22db20e74da3c010000001300000000000000000000000000000000000000006f4bcd416f4bcd41000000801101000000001004020000000000000000000000000000000000000000aa5b8342aa5b8342000000800c01000000000b04020000000000000000000000000000000000000000c4680943c468094300000080030100000000020402000000000000000000000000000000000000000044c3664244c36642000000800d01000000000c04020000000000000000000000000000000000000000e3d2d03fe3d2d03f0000008014010000000013040200000000000000000000000000000000000000007969194379691943000000800101000000000004020000000000000000000000000000000000000000595c1a41595c1a410000008013010000000012040200000000000000000000000000000000000000000adcb2420adcb2420000008009010000000008040200000000000000000000000000000000000000000867114308671143000000800201000000000104020000000000000000000000000000000000000000fd298d41fd298d410000008012010000000011040200000000000000000000000000000000000000003b6501433b65014300000080040100000000030402000000000000000000000000000000000000000028d5d24228d5d2420000008007010000000006040200000000000000000000000000000000000000003ed0e2423ed0e242000000800601000000000504020000000000000000000000000000000000000000155ba342155ba342000000800a010000000009040200000000000000000000000000000000000000004ab346424ab34642000000800e01000000000d040200000000000000000000000000000000000000008c6293428c629342000000800b01000000000a0402000000000000000000000000000000000000000066a4064266a40642000000801001000000000f0402000000000000000000000000000000000000000012cdc24212cdc24200000080080100000000070402000000000000000000000000000000000000000038b9264238b92642000000800f01000000000e040200000000000000000000000000000000000000003bc1f2423bc1f24200000080050100000000040402")

	if err1 != nil {
		fmt.Printf("error code: %v \n", err1)
		return
	}
	tc.SetInput("buffer", arr)
	buf.Reset()
	err = struc.Pack(&buf, arr)
	err = struc.Unpack(&buf, o)
	fmt.Printf("F1 Header : \n %+v \n", o)

	fmt.Println("#######   call routine ")
	act.Eval(tc)

	rtype = tc.GetOutput("msgtype")
	rdata = tc.GetOutput("data")

	fmt.Printf("Msg Type: %v \n", rtype)
	fmt.Printf("csv data: %v \n", rdata)

	if tc.GetOutput("msgtype") == nil {
		t.Fail()
	}

	fmt.Println(" ")
	fmt.Println("#######   Testing -  MSGTYPE 4 - Paricipants ###############################################################")
	arr, err1 = hex.DecodeString("e20701040dbc53c77cf22db20e745a3c000000001314013c061c36422e20484152544c455900000000000000000000000000000000000000000000000000000000000000000000000000000103080e4e462e20414c4f4e534f000000000000000000000000000000000000000000000000000000000000000000000000000000010d01051d532e2056455454454c000000000000000000000000000000000000000000000000000000000000000000000000000000010e040b34532e20504552455a00000000000000000000000000000000000000000000000000000000000000000000000000000000011303120d4c2e205354524f4c4c000000000000000000000000000000000000000000000000000000000000000000000000000000010601071b4b2e2052c384494b4bc3964e454e00000000000000000000000000000000000000000000000000000000000000000000013a091035432e204c45434c45524300000000000000000000000000000000000000000000000000000000000000000000000000000112080207532e2056414e444f4f524e4500000000000000000000000000000000000000000000000000000000000000000000000001090221164d2e205645525354415050454e0000000000000000000000000000000000000000000000000000000000000000000000010809094f4d2e204552494353534f4e00000000000000000000000000000000000000000000000000000000000000000000000000010f004d1b562e20424f54544153000000000000000000000000000000000000000000000000000000000000000000000000000000010a051b1d4e2e2048c39c4c4b454e42455247000000000000000000000000000000000000000000000000000000000000000000000102020303442e2052494343494152444f000000000000000000000000000000000000000000000000000000000000000000000000010b0714154b2e204d41474e555353454e000000000000000000000000000000000000000000000000000000000000000000000000010c07081c522e2047524f534a45414e000000000000000000000000000000000000000000000000000000000000000000000000000111041f1c452e204f434f4e0000000000000000000000000000000000000000000000000000000000000000000000000000000000013d032344532e205349524f544b494e00000000000000000000000000000000000000000000000000000000000000000000000000010005374e432e205341494e5a00000000000000000000000000000000000000000000000000000000000000000000000000000000013b060a1c502e204741534c59000000000000000000000000000000000000000000000000000000000000000000000000000000000007002c0a4c2e2048414d494c544f4e00000000000000000000000000000000000000000000000000000000000000000000000000")

	if err1 != nil {
		fmt.Printf("error code: %v \n", err1)
		return
	}
	tc.SetInput("buffer", arr)
	buf.Reset()
	err = struc.Pack(&buf, arr)
	err = struc.Unpack(&buf, o)
	fmt.Printf("F1 Header : \n %+v \n", o)

	fmt.Println("#######   call routine ")
	act.Eval(tc)

	rtype = tc.GetOutput("msgtype")
	rdata = tc.GetOutput("data")

	fmt.Printf("Msg Type: %v \n", rtype)
	fmt.Printf("csv data: %v \n", rdata)

	if tc.GetOutput("msgtype") == nil {
		t.Fail()
	}

	fmt.Println(" ")
	fmt.Println("#######   Testing -  MSGTYPE 5 - Setup Data ###############################################################")
	arr, err1 = hex.DecodeString("e20701050dbc53c77cf22db20e745a3c000000001306064b4b000040c00000c0bfcecccc3d3433b33e0606060606064b3c0000b8410000ac41060000204106064b4b000040c00000c0bfcecccc3d3433b33e0606060606064b3c0000b8410000ac41060000204106064b4b000040c00000c0bfcecccc3d3433b33e0606060606064b3c0000b8410000ac41060000204106064b4b000040c00000c0bfcecccc3d3433b33e0606060606064b3c0000b8410000ac41060000204106064b4b000040c00000c0bfcecccc3d3433b33e0606060606064b3c0000b8410000ac41060000204106064b4b000040c00000c0bfcecccc3d3433b33e0606060606064b3c0000b8410000ac41060000204106064b4b000040c00000c0bfcecccc3d3433b33e0606060606064b3c0000b8410000ac41060000204106064b4b000040c00000c0bfcecccc3d3433b33e0606060606064b3c0000b8410000ac41060000204106064b4b000040c00000c0bfcecccc3d3433b33e0606060606064b3c0000b8410000ac41060000204106064b4b000040c00000c0bfcecccc3d3433b33e0606060606064b3c0000b8410000ac41060000204106064b4b000040c00000c0bfcecccc3d3433b33e0606060606064b3c0000b8410000ac41060000204106064b4b000040c00000c0bfcecccc3d3433b33e0606060606064b3c0000b8410000ac41060000204106064b4b000040c00000c0bfcecccc3d3433b33e0606060606064b3c0000b8410000ac41060000204106064b4b000040c00000c0bfcecccc3d3433b33e0606060606064b3c0000b8410000ac41060000204106064b4b000040c00000c0bfcecccc3d3433b33e0606060606064b3c0000b8410000ac41060000204106064b4b000040c00000c0bfcecccc3d3433b33e0606060606064b3c0000b8410000ac41060000204106064b4b000040c00000c0bfcecccc3d3433b33e0606060606064b3c0000b8410000ac41060000204106064b4b000040c00000c0bfcecccc3d3433b33e0606060606064b3c0000b8410000ac41060000204106064b4b000040c00000c0bfcecccc3d3433b33e0606060606064b3c0000b8410000ac41060000204106064b4b000040c00000c0bfcecccc3d3433b33e0606060606064b3c0000b8410000ac41060000204150e54934e40a408d5c5a1c870800450005592dc1000080118460c0a80118c0a8010af032512905455e1ce20701000dbc53c77cf22db20e745a3c0000000013ef9f9243c63699c26aac23c35c2661bb14fa1fbb1474c6b9b5ba8cff9d6b70946bfcb9ba602db6bd8910a53cdbdb913d4f8212bf80a5d0bcaa7ae53c0a8d8543688a99c25df004c3ac0bb13840f2223840d23db9acbabdff976b759456fcb2ba4477fc3b89a67dbad1922cbd419612bf0084cebc4ac8ea3c0ca56843383d99c2e1a58bc2a59a773b92eb8fbbb7060a3bacbaa9ff976b749478fcb1ba136e413d17a5a8bcef71aebdfc9512bfc0dac9bc6219e23cc0f089431f3899c2c1cb08c3368b4fbbaa279ebaa378a6bab0bac0ff9a6b72945bfcb6ba8322bebd18f1f7bbc8dc463df48c12bf00e8ccbc594de93c27e996436d6699c215b43ac38d3f23bb4898f5b9f28d62bab5ba59ff9d6b70947ffcb8bac489aebd56cb4f3becd4e3b92d8112bf805ad3bc145be03c8ff35f43de3d99c2568e61c29494173a4cba3c39a098a2b9a8baacff956b779463fcadbaae545bbd5bf74dbc37e2863db59f12bf800fcebc2c82e73c53f69643bb2499c2aa1d31c31cda843a685993b91973b43ab3ba6dff9b6b71946dfcb6ba7b88833db29ba23b3e0270bb3f8712bfc067d4bcbed6e43cc5558143173c99c26242dcc260b980bb76f6d23b47d5b8baadbaaaff986b759445fcb3ba89cb8abd8b34cb3c5d6f0e3ea89412bf0090d4bc7be9ee3c6dd85f435a8b99c24bef83c2d8e21bbbe66a3f3b6f06c4bab7baa5ff9e6b6e9472fcbcbae4f1ac3bf4742cbcc178963c277c12bf80d4cbbceface33cd2919243ec7799c2bf432dc31d4a743a50353f3abc03743ab3ba7bff9c6b71946dfcb7ba23ee4e3dc39e39bb985dea3a958512bf008bd2bcb7f1e43c40886843a18499c26cd39ec29f8dd73a248d563a9084c838abbab5ff976b759477fcb0ba9b5c7d3ca0b68ab9c037f1b9549712bf00a0c8bcbc7ce23c06ff7943993b99c22267c1c25ba15d3ade75743badd1c539a8baa6ff946b78944afcadbadc00f6bbac9f4dbb336b773ccea112bf80e7d3bc2a8ced3c57377143db8d99c25dadb9c24ab0fc3ad1f5153bcf4d8139a7babeff946b789459fcadba969f6a3c436486bb86213b3c5aa112bf40a3cdbc95e5e93cf1368143fc8399c2e2fceec20ce3ef3abccc1a3ae2418839b2baaaff9b6b729448fcb7baadb69bbbdc20a339a240733a408a12bfc008d4bc8c43ee3c9ee38943ad8999c20c6212c33b79673a705021396bbb273ab1babdff9b6b729451fcb7ba5d0a093dab4be53bf13c9ebc8e8a12bfc05ccfbc70cceb3c869a8543893499c2e7b2f6c24173363bd82bf4b92886903ab1bab4ff9b6b729455fcb7baf836e63b623d993a34358ebc968a12bfc0decfbc19f5ea3c443b8e43f88099c21ed21fc3f88635bbb05d9d3b33cb2bbbb2ba9cff9b6b71945bfcb7ba0eab9fbdf25545bce31f963da88812bf80c3d1bc5d54e93ce1e579434b8899c2a692d4c2141c2aba80bee738d01a5039aebaa8ff996b749448fcb4ba54b66dbd9a6bb8bab4e75ebcbc9112bf004ed4bc763cee3c99488e43363a99c2eb3a16c3e8974dbb782bfb3990988dbab7baafff9e6b6e945cfcbcba3e8a9abdb67a8c3ba11a45bb4f7d12bf00facebcee11e93c5d577143fb3a99c22d95a6c2f54b743b7444013d8ce597b9a8bac1ff956b77946bfcaeba000000000000000000000000769e12bfc085c9bce479e53c0263e2bef690dabd3435e93fdcca1240eac825414c6c93401c478b42cc4080420cd35bc5cb4766c5bb31324679fd174600000000000000000000000000000000000000000000000000000000000000009ce57c3b60db003d485718bb37e0dbbca02b9bbabcfc0ebdb12e99c07656e3c0b10f62c06bd13e39")

	if err1 != nil {
		fmt.Printf("error code: %v \n", err1)
		return
	}
	tc.SetInput("buffer", arr)
	buf.Reset()
	err = struc.Pack(&buf, arr)
	err = struc.Unpack(&buf, o)
	fmt.Printf("F1 Header : \n %+v \n", o)

	fmt.Println("#######   call routine ")
	act.Eval(tc)

	rtype = tc.GetOutput("msgtype")
	rdata = tc.GetOutput("data")

	fmt.Printf("Msg Type: %v \n", rtype)
	fmt.Printf("csv data: %v \n", rdata)

	if tc.GetOutput("msgtype") == nil {
		t.Fail()
	}

	fmt.Println(" ")
	fmt.Println("#######   Testing -  MSGTYPE 6 - Car Telemtery ######################################################")
	arr, err1 = hex.DecodeString("e20701060dbc53c77cf22db20e745a3c000000001300000000000001980d00001a001a001a001a00540054005400540054005400540054005a000000ac410000ac410000b8410000b84100000000000000980d00001a001a001a001a00540054005400540054005400540054005a000000ac410000ac410000b8410000b84100000000000000b81000001a001a001a001a00540054005400540054005400540054005a000000ac410000ac410000b8410000b84100000000000000b81000001a001a001a001a00540054005400540054005400540054005a000000ac410000ac410000b8410000b84100000000000000b81000001a001a001a001a00540054005400540054005400540054005a000000ac410000ac410000b8410000b84100000000000000b81000001a001a001a001a00540054005400540054005400540054005a000000ac410000ac410000b8410000b84100000000000000b81000001a001a001a001a00540054005400540054005400540054005a000000ac410000ac410000b8410000b84100000000000000980d00001a001a001a001a00540054005400540054005400540054005a000000ac410000ac410000b8410000b84100000000000000c40e00001a001a001a001a00540054005400540054005400540054005a000000ac410000ac410000b8410000b84100000000000000b81000001a001a001a001a00540054005400540054005400540054005a000000ac410000ac410000b8410000b84100000000000000b81000001a001a001a001a00540054005400540054005400540054005a000000ac410000ac410000b8410000b84100000000000000c40e00001a001a001a001a00540054005400540054005400540054005a000000ac410000ac410000b8410000b84100000000000000c40e00001a001a001a001a00540054005400540054005400540054005a000000ac410000ac410000b8410000b84100000000000000b81000001a001a001a001a00540054005400540054005400540054005a000000ac410000ac410000b8410000b84100000000000000b81000001a001a001a001a00540054005400540054005400540054005a000000ac410000ac410000b8410000b84100000000000000b81000001a001a001a001a00540054005400540054005400540054005a000000ac410000ac410000b8410000b84100000000000000b81000001a001a001a001a00540054005400540054005400540054005a000000ac410000ac410000b8410000b84100000000000000c40e00001a001a001a001a00540054005400540054005400540054005a000000ac410000ac410000b8410000b84100000000000000980d00001a001a001a001a00540054005400540054005400540054005a000000ac410000ac410000b8410000b84100000001000000b81000001a001a001a001a005400540054005400540054005400540058000000ac410000ac410000b8410000b84100000000")

	if err1 != nil {
		fmt.Printf("error code: %v \n", err1)
		return
	}
	tc.SetInput("buffer", arr)
	buf.Reset()
	err = struc.Pack(&buf, arr)
	err = struc.Unpack(&buf, o)
	fmt.Printf("F1 Header : \n %+v \n", o)

	fmt.Println("#######   call routine ")
	act.Eval(tc)

	rtype = tc.GetOutput("msgtype")
	rdata = tc.GetOutput("data")

	fmt.Printf("Msg Type: %v \n", rtype)
	fmt.Printf("csv data: %v \n", rdata)

	if tc.GetOutput("msgtype") == nil {
		t.Fail()
	}

	fmt.Println(" ")
	fmt.Println("#######   Testing -  MSGTYPE 7 - Car Status  ###########################################################")
	arr, err1 = hex.DecodeString("e20701070dbc53c77cf22db20e745a3c00000000130201003c00e45319410000d242bc34ab0d0900000000000200000000000000000000000024744a040000000000000000000000000201003c006aed18410000d242bc34ab0d0900000000000200000000000000000000000024744a030000000000000000000000000201003c00f2a918410000d242bc34cc100900000000000200000000000000000000000024744a040000000000000000000000000201013c00d8d027410000d2422035cc100900000000000200000000000000000000000024744a030000000000000000000000000201013c004dbf27410000d2422035cc100900000000000200000000000000000000000024744a040000000000000000000000000201023c000a3b27410000d242bc34cc100900000000000200000000000000000000000024744a030000000000000000000000000201003c00e5cb1f410000d242bc34cc100900000000000200000000000000000000000024744a040000000000000000000000000201013c00baa624410000d242bc34ab0d0900000000000200000000000000000000000024744a030000000000000000000000000201013c00cfab22410000d242bc34d70e0900000000000200000000000000000000000024744a030000000000000000000000000201003c00c18821410000d242bc34cc100900000000000200000000000000000000000024744a040000000000000000000000000201003c0073611d410000d2422035cc100900000000000200000000000000000000000024744a040000000000000000000000000201013c001f9922410000d242bc34d70e0900000000000200000000000000000000000024744a030000000000000000000000000201013c000c2e22410000d242bc34d70e0900000000000200000000000000000000000024744a030000000000000000000000000201013c00459d23410000d242bc34cc100900000000000200000000000000000000000024744a030000000000000000000000000201013c004cd427410000d242bc34cc100900000000000200000000000000000000000024744a030000000000000000000000000201003c00cd291c410000d2422035cc100900000000000200000000000000000000000024744a030000000000000000000000000201003c0014f31e410000d2422035cc100900000000000200000000000000000000000024744a030000000000000000000000000201013c0086d323410000d242bc34d70e0900000000000200000000000000000000000024744a030000000000000000000000000201003c00a3b11a410000d242bc34ab0d0900000000000200000000000000000000000024744a030000000000000000000000000201013c00000020410000d2422035cc100900000000000200000000000000000000000024744a03000000000000000000000000")

	if err1 != nil {
		fmt.Printf("error code: %v \n", err1)
		return
	}
	tc.SetInput("buffer", arr)
	buf.Reset()
	err = struc.Pack(&buf, arr)
	err = struc.Unpack(&buf, o)
	fmt.Printf("F1 Header : \n %+v \n", o)

	fmt.Println("#######   call routine ")
	act.Eval(tc)

	rtype = tc.GetOutput("msgtype")
	rdata = tc.GetOutput("data")

	fmt.Printf("Msg Type: %v \n", rtype)
	fmt.Printf("csv data: %v \n", rdata)

	if tc.GetOutput("msgtype") == nil {
		t.Fail()
	}
}
