{
  "name": "utils",
  "type": "flogo:function",
  "version": "0.0.1",
  "title": "Match string to Pattern",
  "description": "returns current time",
  "homepage": "https://github.com/ayh20/flogo-components/functions/utils",
  "functions": [
    {
      "name": "match",
      "description": "Match input against regular expression   utils.match(\"p([a-z]+)ch\", \"peach\")",
      "varArgs": true,
      "args": [
        {
          "name": "expression",
          "type": "string"
        },
        {
          "name": "input",
          "type": "string"
        }
      ]
    },
    {
      "name": "replace",
      "description": "Replace data in a string based on a regular expression match   utils.replace(\"p([a-z]+)ches\", \" I hate peaches !\", \"apples\")",
      "varArgs": true,
      "args": [
        {
          "name": "expression",
          "type": "string"
        },
        {
          "name": "inputstring",
          "type": "string"
        },
        {
          "name": "replacewith",
          "type": "string"
        }
      ]
    },
    {
      "name": "contains",
      "description": "Contains reports whether substr is within s.   utils.contains(\"seafood\", \"foo\")",
      "varArgs": true,
      "args": [
        {
          "name": "inputstring",
          "type": "string"
        },
        {
          "name": "substring",
          "type": "string"
        }
      ]
    },
    {
      "name": "containsany",
      "description": "ContainsAny reports whether any Unicode code points in chars are within s.   utils.containsany(\"failure\", \"u & i\")",
      "varArgs": true,
      "args": [
        {
          "name": "inputstring",
          "type": "string"
        },
        {
          "name": "substring",
          "type": "string"
        }
      ]
    },
    {
      "name": "count",
      "description": "Count counts the number of non-overlapping instances of substr in s. If substr is an empty string, Count returns 1 + the number of Unicode code points in s. utils.count(\"cheese\", \"e\")",
      "varArgs": true,
      "args": [
        {
          "name": "inputstring",
          "type": "string"
        },
        {
          "name": "substring",
          "type": "string"
        }
      ]
    },
    {
      "name": "index",
      "description": "Index returns the index of the first instance of substr in s, or -1 if substr is not present in s. utils.index(\"cheese\", \"e\")",
      "varArgs": true,
      "args": [
        {
          "name": "inputstring",
          "type": "string"
        },
        {
          "name": "substring",
          "type": "string"
        }
      ]
    },
    {
      "name": "indexany",
      "description": "IndexAny returns the index of the first instance of any Unicode code point from chars in s, or -1 if no Unicode code point from chars is present in s. utils.indexany(\"chicken\", \"aeiouy\")",
      "varArgs": true,
      "args": [
        {
          "name": "inputstring",
          "type": "string"
        },
        {
          "name": "substring",
          "type": "string"
        }
      ]
    },
    {
      "name": "lastindex",
      "description": "LastIndex returns the index of the last instance of substr in s, or -1 if substr is not present in s. utils.lastindex(\"go gopher\", \"go\")",
      "varArgs": true,
      "args": [
        {
          "name": "inputstring",
          "type": "string"
        },
        {
          "name": "substring",
          "type": "string"
        }
      ]
    },
    {
      "name": "repeat",
      "description": "Repeat returns a new string consisting of count copies of the string s. utils.repeat(\"na\", 3)",
      "varArgs": true,
      "args": [
        {
          "name": "inputstring",
          "type": "string"
        },
        {
          "name": "count",
          "type": "int"
        }
      ]
    },
    {
      "name": "replace",
      "description": "Replace returns a copy of the string s with the first n non-overlapping instances of old replaced by new.  If n < 0, there is no limit on the number of replacements  utils.replace(\"oink oink oink\", \"k\", \"ky\", 2)",
      "varArgs": true,
      "args": [
        {
          "name": "inputstring",
          "type": "string"
        },
        {
          "name": "old",
          "type": "string"
        },
        {
          "name": "new",
          "type": "string"
        },
        {
          "name": "count",
          "type": "int"
        }
      ]
    },
    {
      "name": "replaceall",
      "description": "ReplaceAll returns a copy of the string s with all non-overlapping instances of old replaced by new.  utils.replaceall(\"oink oink oink\", \"oink\", \"moo\")",
      "varArgs": true,
      "args": [
        {
          "name": "inputstring",
          "type": "string"
        },
        {
          "name": "old",
          "type": "string"
        },
        {
          "name": "new",
          "type": "string"
        }
      ]
    },
    {
      "name": "tolower",
      "description": "ToLower returns a copy of the string s with all Unicode letters mapped to their lower case.  utils.tolower(\"Hello World\")",
      "varArgs": true,
      "args": [
        {
          "name": "inputstring",
          "type": "string"
        }
      ]
    },
    {
      "name": "toupper",
      "description": "ToUpper returns a copy of the string s with all Unicode letters mapped to their upper case.  utils.toupper(\"Hello World\")",
      "varArgs": true,
      "args": [
        {
          "name": "inputstring",
          "type": "string"
        }
      ]
    },
    {
      "name": "trim",
      "description": "Trim returns a slice of the string s with all leading and trailing Unicode code points contained in cutset removed. utils.trim(\"¡¡¡Hello, Gophers!!!\", \"!¡\")",
      "varArgs": true,
      "args": [
        {
          "name": "inputstring",
          "type": "string"
        },
        {
          "name": "cutset",
          "type": "string"
        }
      ]
    },
    {
      "name": "trimleft",
      "description": "TrimLeft returns a slice of the string s with all leading Unicode code points contained in cutset removed. utils.trimleft(\"¡¡¡Hello, Gophers!!!\", \"!¡\")",
      "varArgs": true,
      "args": [
        {
          "name": "inputstring",
          "type": "string"
        },
        {
          "name": "cutset",
          "type": "string"
        }
      ]
    },
    {
      "name": "trimright",
      "description": "TrimRight returns a slice of the string s with all leading Unicode code points contained in cutset removed. utils.trimright(\"¡¡¡Hello, Gophers!!!\", \"!¡\")",
      "varArgs": true,
      "args": [
        {
          "name": "inputstring",
          "type": "string"
        },
        {
          "name": "cutset",
          "type": "string"
        }
      ]
    },
    {
      "name": "trimprefix",
      "description": "TrimPrefix returns s without the provided leading prefix string. If s doesn't start with prefix, s is returned unchanged. utils.trimprefix(\"¡¡¡Hello, Gophers!!!\", \"¡¡¡Hello\")",
      "varArgs": true,
      "args": [
        {
          "name": "inputstring",
          "type": "string"
        },
        {
          "name": "prefix",
          "type": "string"
        }
      ]
    },
    {
      "name": "trimsuffix",
      "description": "TrimSuffix returns s without the provided trailing suffix string. If s doesn't end with suffix, s is returned unchanged. utils.trimsuffix(\"¡¡¡Hello, Gophers!!!\", \"Gophers!!!\")",
      "varArgs": true,
      "args": [
        {
          "name": "inputstring",
          "type": "string"
        },
        {
          "name": "suffix",
          "type": "string"
        }
      ]
    },
    {
      "name": "split",
      "description": "Split slices s into all substrings separated by sep and returns a slice of the substrings between those separators. utils.split(\"a,b,c\", \",\")",
      "varArgs": true,
      "args": [
        {
          "name": "inputstring",
          "type": "string"
        },
        {
          "name": "separator",
          "type": "string"
        }
      ]
    }
  ]
}
